omlc_add_mp(3)
==============

NAME
----
omlc_add_mp - register the definition of a new Measurement Point

SYNOPSIS
--------
[verse]
*#include <oml2/omlc.h>*
[verse]
'OmlMP'* *omlc_add_mp*('const char' *name, 'OmlMPDef' *definition);

DESCRIPTION
-----------

*omlc_add_mp* registers the definition of a new 'Measurement Point'
(MP) with the OML client API and returns a handle to it.

A 'measurement point' accepts typed tuples as input.  The 'definition'
parameter of *omlc_add_mp*() defines this tuple.  It must be an array
of 'OmlMPDef' objects, terminated with a sentinel.  Here is an example:

----
OmlMPDef mp_def [] =
{
  { "source", OML_UINT32_VALUE },
  { "destination", OML_UINT32_VALUE },
  { "length", OML_UINT32_VALUE },
  { "weight", OML_DOUBLE_VALUE },
  { "protocol", OML_STRING_VALUE },
  { NULL, (OmlValueT)0 } /* Sentinel */
};
----

This definition would then be passed to *omlc_add_mp*() like so:

----
OmlMP* mp = omlc_add_mp("myMP", mp_def);
----

The 'MP' must be given a name (the 'name' parameter, "myMP" in this
example), which is used to identify the source 'MP' in the measurement
output (either to the *oml2-server*(1) or a file). The name of each
field of the tuple is the first element of the 'OmlMPDef' object, the
type is the second. The available types are described in *liboml2*(3).

This tuple of (name, type) pairs constitutes a declaration of what
type of data will be injected into the 'MP', and what the data means.
In this sense it is a schema or data definition for the measurement
point.  For more information, including an overview of how filters
work and how *liboml2* outputs measurements, see *liboml2.conf*(5).

*omlc_add_mp*() can only be called after *omlc_init*(3) has been
called, and cannot be called once *omlc_start*(3) has been called.
See *liboml2*(3) for more details on the phases of an OML-enabled
application.

RETURN VALUE
------------

*omlc_add_mp*() returns NULL if an error occurs.  If the call
succeeds, it returns a pointer to an 'OmlMP' object that should be
used in subsequent calls to *omlc_inject*(3).  The 'OmlMP' pointer
should be treated as an opaque handle.

ERRORS
------

*omlc_add_mp*() will return NULL if:

* the 'name' of the MP contains whitespace or is NULL;
* the library cannot allocate memory for the MP;
* *liboml2* has not yet been initialized via a call to *omlc_init*(3).

BUGS
----

Reporting Bugs
~~~~~~~~~~~~~~

To report a bug, please email our support contacts listed here:
http://omf.mytestbed.net/wiki/oml/FAQ_and_Support

Known Bugs
~~~~~~~~~~

For outstanding known bugs, please consult
http://omf.mytestbed.net/projects/oml/issues

SEE ALSO
--------
Manual Pages
~~~~~~~~~~~~
*oml2-server*(1), *liboml2*(1), *liboml2*(3), *liboml2.conf*(5)

*omlc_init*(3), *omlc_start*(3), *omlc_inject*(3)

OML User Manual
~~~~~~~~~~~~~~~
http://omf.mytestbed.net/wiki/oml/Documentation
