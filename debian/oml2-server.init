#! /bin/sh
#
# starts and stops the OML2 server
#     Written by Christoph Dwertmann
# Stop waiting logic adapted from Debian's /etc/init.d/apache2

### BEGIN INIT INFO
# Provides:          oml2-server
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start daemon at boot time
# Description:       Enable service provided by daemon.
### END INIT INFO

NAME=oml2-server
PIDFILE=/var/run/$NAME.pid
FIN_WAIT_TO=`cat /proc/sys/net/ipv4/tcp_fin_timeout`

test -x /usr/bin/$NAME || exit 0

if [ -f /etc/default/oml2-server ]; then
    . /etc/default/oml2-server
fi

start(){
    echo -n "Starting OML server: $NAME"
	start-stop-daemon --start --quiet --background --pidfile $PIDFILE --make-pidfile --exec /usr/bin/$NAME -- $OPTS
    echo "."
}

stop(){
    echo -n "Stopping OML server: $NAME"
	start-stop-daemon --stop --quiet --oknodo --pidfile $PIDFILE
    echo "."
}


pidof_oml2server(){
    if [ -e "$PIDFILE" ]; then
	if pidof $NAME | tr ' ' '\n' | grep -w $(cat $PIDFILE); then
	    return 0
	fi
    fi
    return 1
}

wait_stop(){
    PIDTMP=$(pidof_oml2server) || true
    if kill -0 "${PIDTMP:-}" 2> /dev/null; then
	PID=$PIDTMP
    fi

    stop

    if [ -n "${PID:-}" ]; then
	i=0
	# Wait for the process to terminate
	while kill -0 "${PID:-}" 2> /dev/null;  do
	    if [ $i = '60' ]; then
		break;
	    else
		if [ $i = '0' ]; then
		    echo -n "waiting"
		else
		    echo -n "."
		fi
		i=$(($i+1))
		sleep 1
	    fi
	done
    fi
    # Wait for the kernel to have cleaned up FIN_WAIT sockets (#1262)
    sleep ${FIN_WAIT_TO}
}

case "$1" in
  start)
    start
    ;;
  stop)
    stop
    ;;
  restart|force-reload)
    wait_stop
    start
    ;;
  *)
	echo "Usage: /etc/init.d/$NAME {start|stop|restart|force-reload}"
	exit 1
esac

exit 0

# vim: sw=4
