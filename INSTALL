OML : Orbit Measurment Library : Installation instructions
----------------------------------------------------------

For users
---------

If you just want to use OML, you probably downloaded this package as a
tarball.  The standard UNIX ./configure && make method works for this
package.  Here's what to do:

	  tar xvfz oml2-xxx.tar.gz

	  cd oml2-xxx

	  ./configure --help

(to see the configuration options), and then:

       	  ./configure [possible options]

	  make

	  make install

The most useful option to configure is the --prefix option, which
allows installation in a non-standard location.  The default is
/usr/local.  If you just use the default, the liboml2 library will be
installed in /usr/local/lib, and you should be able to link your
programs against it with a simple -loml2 on the command line to the
linker.  The server, proxy server, and oml2_scaffold will be installed
in /usr/local/bin, and should be in your standard PATH.  The example
programs and the programs in the app/ subdirectory will be installed
in /usr/local/share/bin.

To install OML in your home directory, use:

   	  ./configure --prefix=${HOME}/usr		# For example

	  make

	  make install

Then you will probably need to add ${HOME}/usr/lib to your
LD_LIBRARY_PATH environment variable.  The 'make install' process will
print instructions on what to do.  To run the server, add
${HOME}/usr/bin to your PATH environment variable (and also
${HOME}/usr/share/bin if you want to use the example programs and
applications).

TODO:  add instructions for building libsigar.

For developers
--------------

If you want to modify or enhance OML, you probably checked out the
sources from the OML svn repository at

	http://svn.mytestbed.net/OML

In that case, in order to build the package you first need to generate
the configure script and Makefiles.  To do this you need the Autotools
installed: Autoconf, Automake, and Libtool.  If you use a Linux
distribution, these should all be available via your system's package
manager.

You'll also need to install the CHECK package (a unit testing
framework).  You can find it here:

http://check.sourceforge.net

It's also available as an Ubuntu package:

$ apt-get install check

Once you have installed the Autotools and CHECK, you should be able to
generate all the necessary configuration and Makefiles by doing this

    	cd oml2-xxx

	autoreconf --install

If this doesn't work, you can run each of the Autotools individually.
The following should work:

   	libtoolize --copy
	aclocal
	autoconf
	automake --add-missing --copy

At this point you should be ready to run 

   	./configure && make && make install, 

as above.

If you prefer to keep your executables, object files, and other
generated files in a separate tree, Automake supports a parallel build
using GNU Make's VPATH feature.  For instance, to build in a
subdirectory called 'build', do the following:

	cd oml2-xxx

	mkdir build

	cd build

	../configure [possible options]

	make

	make install

All the files generated by configure and make will be put under the
build directory.  Automake recognizes that configure was run in a
directory different to the root of the source tree, and adjusts its
behaviour accordingly.

Finally, if you want to restore the tree to a clean state, without the
generated Makefile, Makefile.in, and copied Autoconf/Automake/Libtool
files, do this:

         cd oml2-xxx

	 ./autoclean.sh

Once you do this, you'll have to follow the above procedure again to
get the tree into a state where you can build it.