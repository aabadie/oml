
/*
 * This file is automatically generated by oml_scaffold. Please do not edit.
 */

#ifndef OMF_NMETRICS_OML_H
#  define OMF_NMETRICS_OML_H

#include <oml2/omlc.h>

typedef struct {
  OmlMP* memory;
  OmlMP* cpu;
  OmlMP* network;
  OmlMP* procs;
  OmlMP* proc;

} oml_mps_t;


#ifndef OML_FROM_MAIN

oml_mps_t* g_oml_mps;

#else

static OmlMPDef oml_memory_def[] = {
  {"ram", OML_LONG_VALUE},
  {"total", OML_LONG_VALUE},
  {"used", OML_LONG_VALUE},
  {"free", OML_LONG_VALUE},
  {"actual_used", OML_LONG_VALUE},
  {"actual_free", OML_LONG_VALUE},
  {NULL, (OmlValueT)0}
};

static OmlMPDef oml_cpu_def[] = {
  {"user", OML_LONG_VALUE},
  {"sys", OML_LONG_VALUE},
  {"nice", OML_LONG_VALUE},
  {"idle", OML_LONG_VALUE},
  {"wait", OML_LONG_VALUE},
  {"irq", OML_LONG_VALUE},
  {"soft_irq", OML_LONG_VALUE},
  {"stolen", OML_LONG_VALUE},
  {"total", OML_LONG_VALUE},
  {NULL, (OmlValueT)0}
};

static OmlMPDef oml_network_def[] = {
  {"name", OML_STRING_VALUE},
  {"rx_packets", OML_LONG_VALUE},
  {"rx_bytes", OML_LONG_VALUE},
  {"rx_errors", OML_LONG_VALUE},
  {"rx_dropped", OML_LONG_VALUE},
  {"rx_overruns", OML_LONG_VALUE},
  {"rx_frame", OML_LONG_VALUE},
  {"tx_packets", OML_LONG_VALUE},
  {"tx_bytes", OML_LONG_VALUE},
  {"tx_errors", OML_LONG_VALUE},
  {"tx_dropped", OML_LONG_VALUE},
  {"tx_overruns", OML_LONG_VALUE},
  {"tx_collisions", OML_LONG_VALUE},
  {"tx_carrier", OML_LONG_VALUE},
  {"speed", OML_LONG_VALUE},
  {NULL, (OmlValueT)0}
};

static OmlMPDef oml_procs_def[] = {
  {"cpu_id", OML_LONG_VALUE},
  {"total", OML_LONG_VALUE},
  {"sleeping", OML_LONG_VALUE},
  {"running", OML_LONG_VALUE},
  {"zombie", OML_LONG_VALUE},
  {"stopped", OML_LONG_VALUE},
  {"idle", OML_LONG_VALUE},
  {"threads", OML_LONG_VALUE},
  {NULL, (OmlValueT)0}
};

static OmlMPDef oml_proc_def[] = {
  {"pid", OML_LONG_VALUE},
  {"start_time", OML_LONG_VALUE},
  {"user", OML_LONG_VALUE},
  {"sys", OML_LONG_VALUE},
  {"total", OML_LONG_VALUE},
  {NULL, (OmlValueT)0}
};


static oml_mps_t g_oml_mps_storage;
oml_mps_t* g_oml_mps = &g_oml_mps_storage;

static void
oml_register_mps()

{
  g_oml_mps->memory = omlc_add_mp("memory", oml_memory_def);
  g_oml_mps->cpu = omlc_add_mp("cpu", oml_cpu_def);
  g_oml_mps->network = omlc_add_mp("network", oml_network_def);
  g_oml_mps->procs = omlc_add_mp("procs", oml_procs_def);
  g_oml_mps->proc = omlc_add_mp("proc", oml_proc_def);

}
#endif /* OML_FROM_MAIN */
#endif
