# This file was automatically generated by oml2-scaffold 2.12.0
# The syntax of this file is documented at [0].
#
# [0] http://doc.mytestbed.net/doc/omf/OmfEc/Backward/AppDefinition.html

defApplication('oml:generator', 'generator') do |app|

  app.version(2, 12, 0)
  app.shortDescription = 'Example OML application'
  app.description = %{
This programs implements a simple sine wave generator with
the output measured by OML.

It is almost only generated by oml2-scaffold.
}
  app.path = "/usr/local/bin/generator"

  # Declare command-line arguments; generate Popt parser with
  #  oml2-scaffold --opts generator.rb
  app.defProperty('amplitude', 'Amplitude of produced signal', '-a',
	:type => :double, :mnemonic => 'a')
  app.defProperty('frequency', 'Frequency of wave generated', '-f',
	:type => :double, :unit => 'hertz')
  app.defProperty('quiet', 'Don\'t produce STDOUT output', '-q',
	:type => :boolean, :mnemonic => 'q')
  app.defProperty('samples', 'Number of samples to take. -1 = forever', '-n',
	:type => :int32, :default => 1)
  app.defProperty('sample-interval', 'Time between consecutive measurements', '-i',
	:type => :double, :unit => 'seconds',
	:var_name => "sample_interval") # This can be omitted, as scaffold will do the cleanup a needed.

  # Declare measurement points; generate OML injection helpers with
  #  oml2-scaffold --oml generator.rb
  # Declare measurement points; generate OML injection helpers with
  #  oml2-scaffold --oml generator.rb
  app.defMeasurement("d_lin") do |m|
    m.defMetric('label', :string)
    m.defMetric('seq_no', :uint32)
  end

  app.defMeasurement("d_sin") do |m|
    m.defMetric('label', :string)
    m.defMetric('phase', :double)
    m.defMetric('value', :double)
  end

end

# Local Variables:
# mode:ruby
# End:
# vim: ft=ruby:sw=2
